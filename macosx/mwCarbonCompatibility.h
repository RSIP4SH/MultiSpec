/* *	WASTE Demo Project: *	Carbon Compatibility * *	Copyright © 1993-2000 Marco Piovanelli *	All Rights Reserved * *	C port by John C. Daub * *	<mailto:waste@merzwaren.com> *	<http://www.merzwaren.com/waste/> */#pragma once#ifndef __CARBONCOMPATIBILITY__#define __CARBONCOMPATIBILITY__/*#ifndef __CONDITIONALMACROS__#include <ConditionalMacros.h>#endif#ifndef __MACTYPES__#include <MacTypes.h>#endif#ifndef __QUICKDRAW__#include <Quickdraw.h>#endif#ifndef __MACWINDOWS__#include <MacWindows.h>#endif#ifndef __DIALOGS__#include <Dialogs.h>#endif#ifndef __AEDATAMODEL__#include <AEDataModel.h>#endif#ifndef __NAVIGATION__#include <Navigation.h>#endif*/							               	   extern char* 					CtoPstring ( 										char*									inCStringPtr, 										char*									outPStringPtr);  extern char*	 				PtoCstring ( 										char*									inPStringPtr, 										char*									outCStringPtr); #if !TARGET_API_MAC_CARBON#if !ACCESSOR_CALLS_ARE_FUNCTIONS//	Carbon compatibility macros	inline Rect* GetRegionBounds (RgnHandle inRegion, Rect *outBounds)		{ *outBounds = (*inRegion)->rgnBBox; return outBounds; }		//	inline WindowRef GetWindowFromPort (CGrafPtr port)//		{ return (WindowRef)port; }		//	inline void SetPortDialogPort ( DialogRef inDialog )//		{ MacSetPort ( (GrafPtr)inDialog ); }		//	inline Rect * GetWindowPortBounds (WindowRef inWindow, Rect *outBounds)//		{ *outBounds = inWindow->portRect; return outBounds; }			inline Rect * GetListViewBounds (ListRef listRef, Rect * outBounds)		{ *outBounds = (*listRef)->rView; return outBounds; }			inline RgnHandle GetPortClipRegion (CGrafPtr port,  RgnHandle clipRgn)		{ CopyRgn (port->clipRgn, clipRgn); return clipRgn; }			inline RgnHandle GetPortVisibleRegion (CGrafPtr port,  RgnHandle visRgn)		{ CopyRgn (port->visRgn, visRgn); return visRgn; }			inline Cursor * GetQDGlobalsArrow (Cursor *outCursor)		{ *outCursor = qd.arrow; return outCursor; }			inline WindowRef GetControlOwner ( ControlRef inControl )		{ return (*inControl)->contrlOwner; }			inline UInt16 GetControlHilite ( ControlRef inControl )		{ return (*inControl)->contrlHilite; }			inline Rect * GetControlBounds (ControlRef inControl, Rect* outBounds)		{ *outBounds = (*inControl)->contrlRect; return outBounds; }		//	inline DialogRef GetDialogFromWindow ( WindowRef inWindow )//		{ return inWindow; }		//	inline CGrafPtr GetDialogPort ( DialogRef inDialog )//		{ return (CGrafPtr)inDialog; }		//	inline TEHandle GetDialogTextEditHandle (DialogRef inDialog)//		{ return ((DialogPeek)inDialog)->textH; }			inline OSStatus InvalWindowRect ( WindowRef inWindow, Rect* bounds)		{ InvalRect (bounds); return 0;}			inline void SetPortClipRegion (CGrafPtr port,  RgnHandle clipRgn)		{ CopyRgn (clipRgn, port->clipRgn); }			inline void SetPortVisibleRegion (CGrafPtr port,  RgnHandle visRgn)		{ CopyRgn (visRgn, port->visRgn); }			inline OSStatus ValidWindowRect ( WindowRef inWindow, Rect* bounds)		{ ValidRect (bounds); return noErr;}			inline void CopyCStringToPascal (const char* src, Str255 dst)		{ CtoPstring ( (char*)src, (char*)dst ); }			inline void CopyPascalStringToC (ConstStr255Param src, char* dst)		{ PtoCstring ( (char*)src, (char*)dst ); }//#ifndef NewNavEventUPP//	#define NewNavEventUPP(PROC)		NewNavEventProc(PROC)//#endif//#ifndef DisposeNavEventUPP//	#define DisposeNavEventUPP(UPP)		DisposeRoutineDescriptor(UPP)//#endif		//	Carbon compatibility callsextern pascal Size AEGetDescDataSize ( const AEDesc * ) ;extern pascal OSErr 	AEGetDescData ( const AEDesc *, void *, Size ) ;extern MenuRef 		GetControlPopupMenuHandle (								ControlRef 							control);				extern BitMap* 		GetPortBitMapForCopyBits (								CGrafPtr              			port);extern Rect*			GetPortBounds (								CGrafPtr               			port,                        Rect*                 			rect);extern short 			GetPortTextSize (								CGrafPtr               			port);extern RgnHandle 		GetPortVisibleRegion (								CGrafPtr              			port,                        RgnHandle              			visRgn);extern RgnHandle 		GetPortClipRegion (								CGrafPtr              			port,                        RgnHandle              			clipRgn);extern PixMapHandle 	GetPortPixMap (								CGrafPtr               			port);				extern Pattern* 		GetQDGlobalsBlack (								Pattern *             			blackPtr);				extern Pattern* 		GetQDGlobalsGray (								Pattern *             			grayPtr);extern BitMap* 		GetQDGlobalsScreenBits (								BitMap*               			screenBits);				extern Pattern* 		GetQDGlobalsWhite (								Pattern *             			whitePtr);extern void		 		SetPortVisibleRegion (								CGrafPtr              			port,                        RgnHandle              			visRgn);extern void		 		SetPortClipRegion (								CGrafPtr              			port,                        RgnHandle              			clipRgn);//extern CGrafPtr		GetDialogPort (//								DialogRef              			dialog);//extern TEHandle		GetDialogTextEditHandle (//								DialogRef             			dialog);								//extern WindowRef		GetWindowList (void);#endif	// !ACCESSOR_CALLS_ARE_FUNCTIONS		inline pascal void DisableMenuItem (MenuRef theMenu, MenuItemIndex item)	{ DisableItem (theMenu, item); }	inline pascal void EnableMenuItem (MenuRef theMenu, MenuItemIndex item)	{ EnableItem (theMenu, item); }    #if TARGET_CPU_PPC	inline void GetWindowUpdateRgn(WindowRef window, RgnHandle r) 		{ MacCopyRgn(((WindowPeek)window)->updateRgn, r); }#endif // TARGET_CPU_PPC								#endif /*!TARGET_API_MAC_CARBON*/#if TARGET_API_MAC_CARBON	typedef OSType             SFTypeList[4];	#define StripAddress(x)    ((Ptr)(x))		#define UnloadSeg(x)	#endif /*TARGET_API_MAC_CARBON*/#endif /*__CARBONCOMPATIBILITY__*/