//	 									MultiSpec////					Laboratory for Applications of Remote Sensing//									Purdue University//								West Lafayette, IN 47907//								 Copyright (1988-2003)//								© Purdue Research Foundation//									All rights reserved.////					The following was put here for easy access to a template.//					DebugStr ("\pmultiSpec.c);//// File:						multiSpec.c////	Functions in file:	////	Brief description:	The routines in this file support OSX for MultiSpec.//////	Include files:			"MultiSpecHeaders"//								"multiSpec.h"////	Language:				C////	System:					Macintosh Operating System////	Authors:					Larry L. Biehl////	Revision number:		3.0////	Revision date:			09/21/2001//#include	"SMulSpec.h"//#include "SExtGlob.h"											// Prototypes for routines in this file that are only called by					// other routines in this file.//------------------------------------------------------------------------------------//								 Copyright (1988-2003)//								© Purdue Research Foundation//									All rights reserved.////	Function name:		OSErr CreateFrameworkBundleFromName////	Software purpose:	////	Parameters in:				////	Parameters out:				//// Value Returned:	// // Called By:////	Coded By:			Larry L. Biehl			Date: 10/12/2001//	Revised By:			Larry L. Biehl			Date: 10/12/2001		OSErr CreateFrameworkBundleFromName(				CFStringRef 						theFrameworkName, 				CFBundleRef*						theBundle)				{	OSErr 								theErr;	FSRef 								theRef;	CFURLRef 							theFrameworkURL;	CFURLRef 							theBundleURL;					// Find the folder containing all the frameworks				theErr = FSFindFolder(kOnAppropriateDisk, kFrameworksFolderType, false, &theRef);		if (theErr == noErr)		{				// Turn the framework folder FSRef into a CFURL						theFrameworkURL = CFURLCreateFromFSRef(kCFAllocatorSystemDefault, &theRef);				if (theFrameworkURL != NULL)			{					// Create a CFURL pointing to the desired framework								theBundleURL = CFURLCreateCopyAppendingPathComponent(kCFAllocatorSystemDefault,				theFrameworkURL, theFrameworkName, false);						CFRelease(theFrameworkURL);						if (theBundleURL != NULL)				{						// Turn the CFURL into a bundle reference										*theBundle = CFBundleCreate(kCFAllocatorSystemDefault, theBundleURL);								CFRelease(theBundleURL);								}		// end "if (theBundleURL != NULL)"							}		// end "if (theFrameworkURL != NULL)"					}		// end "if (theErr == noErr)"		return theErr;	}		// end "CreateFrameworkBundleFromName"